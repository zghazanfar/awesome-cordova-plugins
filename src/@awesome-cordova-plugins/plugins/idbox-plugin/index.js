var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
export var ShootMode = Object.freeze({
    /**
   * Sets a mode of scanning a single side identity
   */
    SCAN_1S_ONLY: "SCAN_1S",
    /**
     * Sets a mode of scanning a double side identity
     */
    SCAN_2S_ONLY: "SCAN_2S",
    /**
     * Sets a mode of scanning the front side of a double side identity
     */
    /**
     * Sets a mode of scanning of the back side of a double side identity
     */
    /**
     * Sets a mode of scanning of an additional document
     */
    SCAN_1S_OTHER: "SCAN_1S_OTHER",
    /**
     * Sets a mode of capturing a selfie picture
     */
    PHOTO_ONLY: "PHOTO_ONLY",
    /**
    * Sets a mode of scanning an ID
    */
    SCAN_ID_ONLY: "SCAN_ID_ONLY",
});
export var FontName = Object.freeze({
    FONT_DEFAULT: "Default",
    FONT_DEFAULT_BOLD: "Default_bold",
    FONT_SANS_SERIF_REGULAR: "sans_serif",
    FONT_SERIF_REGULAR: "serif",
    FONT_OPEN_SANS_REGULAR: "open_sans",
    FONT_OPEN_SANS_BOLD: "open_sans_bold",
    FONT_AVERTA_REGULAR: "averta_regular",
    FONT_AVERTA_BOLD: "averta_bold.otf",
});
export var TransPortMethod = Object.freeze({
    ALL: 0,
    WEBSOCKETS: 1,
    LONG_POLLING: 2,
});
export var TextAlignment = Object.freeze({
    LEFT: 0,
    CENTER: 1,
    RIGHT: 2,
    JUSTIFIED: 3,
    NATURAL: 4,
});
var Idbox_PluginOriginal = /** @class */ (function (_super) {
    __extends(Idbox_PluginOriginal, _super);
    function Idbox_PluginOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Idbox_PluginOriginal.prototype.registerRequest = function (arg1) { return cordova(this, "registerRequest", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.getUrl = function () { return cordova(this, "getUrl", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.getRequestId = function (arg1) { return cordova(this, "getRequestId", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.initWithHawkCredentials = function (arg1) { return cordova(this, "initWithHawkCredentials", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.getNextStep = function (arg1) { return cordova(this, "getNextStep", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.skipDocumentStep = function () { return cordova(this, "skipDocumentStep", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.pleaseWait = function (arg1) { return cordova(this, "pleaseWait", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.setRequestMetaData = function (arg2) { return cordova(this, "setRequestMetaData", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.getBatchSourceUploadDocs = function () { return cordova(this, "getBatchSourceUploadDocs", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.uploadSelfie = function (arg1, arg2) { return cordova(this, "uploadSelfie", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.uploadIdentitySingleSide = function (arg1, arg2) { return cordova(this, "uploadIdentitySingleSide", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.uploadIdentity2Sides = function (arg1, arg2) { return cordova(this, "uploadIdentity2Sides", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.uploadAdditionalDocuments = function (arg1, arg2) { return cordova(this, "uploadAdditionalDocuments", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.videoCallQueue = function (arg1) { return cordova(this, "videoCallQueue", { "observable": true }, arguments); };
    Idbox_PluginOriginal.prototype.videoCall = function (arg1) { return cordova(this, "videoCall", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.startProcess = function () { return cordova(this, "startProcess", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.uploadAdditionalDocumentsBranch = function (arg1, arg2) { return cordova(this, "uploadAdditionalDocumentsBranch", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.scanSelfie = function (arg1) { return cordova(this, "scanSelfie", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.scanIdentity = function (arg1) { return cordova(this, "scanIdentity", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.scan1SIdentity = function (arg1) { return cordova(this, "scan1SIdentity", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.scan2SIdentity = function (arg1) { return cordova(this, "scan2SIdentity", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.scanAdditionalDocuments = function (arg1) { return cordova(this, "scanAdditionalDocuments", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.startVideoSession = function (arg1) { return cordova(this, "startVideoSession", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.startListeningVideoSignalR = function (arg1) { return cordova(this, "startListeningVideoSignalR", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.startListeningSignalR = function (arg1) { return cordova(this, "startListeningSignalR", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.pingServer = function () { return cordova(this, "pingServer", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.prototype.getRequestMetadata = function () { return cordova(this, "getRequestMetadata", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Idbox_PluginOriginal.pluginName = "Idbox_Plugin";
    Idbox_PluginOriginal.plugin = "Idbox_Plugin";
    Idbox_PluginOriginal.pluginRef = "cordova.plugins.Idbox_Plugin";
    Idbox_PluginOriginal.repo = "";
    Idbox_PluginOriginal.install = "";
    Idbox_PluginOriginal.installVariables = [];
    Idbox_PluginOriginal.platforms = ["Android", "iOS"];
    return Idbox_PluginOriginal;
}(AwesomeCordovaNativePlugin));
var Idbox_Plugin = new Idbox_PluginOriginal();
export { Idbox_Plugin };
//# sourceMappingURL=data:application/json;base64,